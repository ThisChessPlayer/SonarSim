-------------------------------------------------------------------------------
               ___ _____ _____ _____ ____    ___ _____ _________               
              / __|  _  |  _  |  _  |  _ \  / __|_   _|  _   _  |              
              \ \ | | | | | | | |_| | |_| | \ \   | | | | | | | |              
              _\ \| |_| | | | |  _  |  _ <  _\ \ _| |_| | | | | |              
             |___/|_____|_| |_|_| |_|_| \_\|___/|_____|_| |_| |_|              
-------------------------------------------------------------------------------

Generates realistic hydrophone receiver times given specified multiple object
placement. This allows for testing of algorithms and visualization of possible
object locations given receiver locations.

Dependencies:
   -Python 2.7 (probably easily modifyable for 3.x since I use the print
                function pretty heavily. Also likely won't be printing much
		in final version, mostly for debugging)
   -Numpy
   
Not dependent but I also remember adding the following on my Raspberry Pi:
   -git
   -gvim
   -vim
   -I think python 3.4 is also on my pi? Dunno which version my program really
    uses since I appear to have both 2.7 and 3.4 as well as compatibility
    libraries. I did import from __future__ though so I think I'm using 2.7?

Running program:
   Place sonarSim1_2.py in current directory, type the command:
        python sonarSim1_2.py

Changelog:
-> V1.2
   Ellipse Triangulation
   -Added support for a debugging mode for beautiful debugging output.
   
   Driver
   -TODO will work on a way to distinguish objects from the floor of the pool
    and generally determine positions in 3D space. May need input from previous
    input as robot moves.

-> V1.1
   Ellipse Triangulation
   -Prints out calculated locations based on list of object locations
   -Can resolve for multiple objects now, a significant improvement over 1.0's
    capability
   -Visualization does not work with 1.1's ellipse triangulation, and still
    uses the old method of brute forcing times together
   Quadratic Solving
   -Has quadratic solving functionality now
   
-> V1.0
   Scalable Grid
   -User can generate time table from grid of specified unit increment and size
    in both x and y axes.
   -The region is centered in x axis, but not in y.

   Objects
   -X and Y positions fixed before runtime, objects represented in 2D array.
     -2D array contains x pos, y pos, and 3 receiver times for each object.
   -Receiver times generated during runtime.
   
   Visualization
   -Can print labeled graph of locations in scalable grid with matching 
    receiver times, allowing the user to see where an object could possibly be.
   -Visualization is written to file 'timeTable'.
   -Has option for single object or set of receiver time visualization.
