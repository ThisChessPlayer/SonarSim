-------------------------------------------------------------------------------
               ___ _____ _____ _____ ____    ___ _____ _________               
              / __|  _  |  _  |  _  |  _ \  / __|_   _|  _   _  |              
              \ \ | | | | | | | |_| | |_| | \ \   | | | | | | | |              
              _\ \| |_| | | | |  _  |  _ <  _\ \ _| |_| | | | | |              
             |___/|_____|_| |_|_| |_|_| \_\|___/|_____|_| |_| |_|              
-------------------------------------------------------------------------------
Generates realistic hydrophone receiver times given specified multiple object
placement. This allows for testing of algorithms and visualization of possible
object locations given receiver locations.
-------------------------------------------------------------------------------
C++ version:
   -g++ compiler with c++11 standard

Python version Dependencies:
   -Numpy
   -Python3 
-------------------------------------------------------------------------------
Running program:

   Place sonarSim1_4.py in current directory, type the command:
      python3 sonarSim1_4.py
-------------------------------------------------------------------------------
Changelog:

-> V1.5
   sonarSim
   -Runs simulation, does everything 1.4 does except does not run resolution
    algorithm on impossible sets of times. This is calculated by looking at the
    biggest difference two times can have based on their receiver positioning.

   SensorTArray
   -Object which contains information about receiver positioning as well as 
    environment variables.

   Trinar
   -Contains ellipse triangulation functions for calculating positions of
    objects as well as exact/simulated times given an object and SensorTArray. 

   util
   -Contains timer and range check functions for ease of use.
   
--- C++    versions above ---
--- Python Versions below ---

-> V1.4
   Driver
   -Displays time used to calculate times and resolve objects

   Robot Movement
   -TODO Realtime ping simulation
   
   Receiver Profiles
   -TODO Beginning to add profile support for receiers, time extraction
   -TODO Looks at average changes in power, assigns time at sharp increase in 
    power.

   Circle-Ellipse Intersections
   -Improved efficiency, better debug prints
   -Got rid of redundant code

-> V1.3
   Object/Receiver Placement
   -Receiver locations can be adjusted now
   -Added third dimension

   T-shaped Array Resolution
   -Allows for 3D pinpointing of objects
   -Sometimes false positives appear, although for the most part
    objects are accurately detected.

   TimeTable
   -Removed old/unused code used for generating time-tables or resolving
    single/multiple objects in 2D.

   Driver
   -Now displays receiver locations
   -Added third dimension
   -Adjustable extra memory for false positives without flowing out of bounds

-> V1.2
   Ellipse Triangulation
   -Added support for a debugging mode for beautiful debugging output.

-> V1.1
   Ellipse Triangulation
   -Prints out calculated locations based on list of object locations
   -Can resolve for multiple objects now, a significant improvement over 1.0's
    capability
   -Visualization does not work with 1.1's ellipse triangulation, and still
    uses the old method of brute forcing times together
   Quadratic Solving
   -Has quadratic solving functionality now
   
-> V1.0
   Scalable Grid
   -User can generate time table from grid of specified unit increment and size
    in both x and y axes.
   -The region is centered in x axis, but not in y.

   Objects
   -X and Y positions fixed before runtime, objects represented in 2D array.
     -2D array contains x pos, y pos, and 3 receiver times for each object.
   -Receiver times generated during runtime.
   
   Visualization
   -Can print labeled graph of locations in scalable grid with matching 
    receiver times, allowing the user to see where an object could possibly be.
   -Visualization is written to file 'timeTable'.
   -Has option for single object or set of receiver time visualization.
